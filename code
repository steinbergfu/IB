from ibapi.client import EClient
from ibapi.wrapper import EWrapper
from ibapi.contract import Contract
import datetime
import threading
import time
import pandas
from ibapi.order import Order

class IBapi(EWrapper, EClient):
    def __init__(self):
        EClient.__init__(self, self)
        self.data =[]# Initialize variable to store candle

    def historicalData(self, reqId, bar):
        print(f'DateTime: {bar.date}  Open: {bar.open}  High: {bar.high} Close: {bar.close}  Low: {bar.low}  Volume: {bar.volume}')
        self.data.append([bar.date, bar.open,bar.high,bar.close,bar.low,bar.volume])
        if len(self.data)==62:
               self.data =[]# Initialize variable to store candle
    def nextValidId(self, orderId):
        super().nextValidId(orderId)
        self.nextValidOrderId = orderId
        print("NextValidId:", orderId)

def run_loop():
    app.run()


app = IBapi()
app.connect('127.0.0.1', 7497, 123)


# Start the socket in a thread
api_thread = threading.Thread(target=run_loop, daemon=True)
api_thread.start()

time.sleep(10)  # Sleep interval to allow time for connection to server
app.reqCurrentTime ()
# Create contract object

contract = Contract()
contract.symbol = 'DAX'
contract.secType = 'CONTFUT'
contract.exchange = 'Eurex'
contract.currency = 'EUR'
# contract.multiplier=1
contract.lastTradeDateOrContractMonth = '202312'

# Request historical candles
app.reqHistoricalData(1, contract, '', '1 D', '5 mins', 'TRADES', 0, 1, False, [])
        #
time.sleep(2)  # sleep to allow enough time for data to be returned
        # headers = ['DateTime', 'Open', 'High', 'Low', 'Close','Volume']
        # print(dict(zip(headers, app.data)))
df_data = {}
df = pandas.DataFrame(app.data)
print(123333)
print(df)
print(456)
df.columns=['DateTime','Open','High','Close','Low','Volume']
print(789)
df.to_csv('DAX-52.csv')

